import pandas as pd
import numpy as np

dados = pd.read_csv('https://github.com/RafaelBaltazar/RafaelBaltazar.github.io/blob/main/projects/music_recomendator/Dados_totais.csv')
dados_genero = pd.read_csv('https://github.com/RafaelBaltazar/RafaelBaltazar.github.io/blob/main/projects/music_recomendator/data_by_genres.csv')
dados_anos = pd.read_csv("https://github.com/RafaelBaltazar/RafaelBaltazar.github.io/blob/main/projects/music_recomendator/data_by_year.csv")

dados.head()

dados.shape

dados['year'].unique()

dados = dados.drop(["explicit", "key", "mode"],axis=1)
dados.head()

dados.isna().sum()

dados_genero.head(3)

dados_genero = dados_genero.drop(["key", "mode"],axis=1)
dados_genero.head()

dados_genero.isnull().sum()

dados_anos.head()

dados_anos['year'].unique()

dados_anos = dados_anos[dados_anos['year']>=2000]

dados_anos.head()

dados_anos.reset_index()

import plotly.express as px

fig = px.line(dados_anos, x='year', y='loudness', markers= True, title='Variação do Loudness')
fig.show()

import plotly.graph_objects as go

fig = go.Figure()

fig.add_trace(go.Scatter(x=dados_anos['year'], y=dados_anos['acousticness'], name='Acousticness'))
fig.add_trace(go.Scatter(x=dados_anos['year'], y=dados_anos['danceability'], name='danceability'))
fig.add_trace(go.Scatter(x=dados_anos['year'], y=dados_anos['energy'], name='energy'))
fig.add_trace(go.Scatter(x=dados_anos['year'], y=dados_anos['valence'], name='valence'))
fig.add_trace(go.Scatter(x=dados_anos['year'], y=dados_anos['liveness'], name='liveness'))
fig.add_trace(go.Scatter(x=dados_anos['year'], y=dados_anos['instrumentalness'], name='instrumentalness'))
fig.add_trace(go.Scatter(x=dados_anos['year'], y=dados_anos['speechiness'], name='speechiness'))

fig.show()

fig = px.imshow(dados.corr(), text_auto=True)
fig.show()

dados_genero.head(2)

dados_generos1 = dados_genero.drop(['genres'], axis=1)
dados_generos1.head(2)

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

SEED = 1224
np.random.seed(1224)

pca_pipeline = Pipeline([('scaler', StandardScaler()), ('PCA', PCA(n_components=2, random_state=SEED))])

genre_embedding_pca = pca_pipeline.fit_transform(dados_generos1)
projection = pd.DataFrame(columns=['x', 'y'], data=genre_embedding_pca)

projection

from sklearn.cluster import KMeans

kmeans_pca = KMeans(n_clusters=5, verbose=True, random_state=SEED)

kmeans_pca.fit(projection)

dados_genero['cluster_pca'] = kmeans_pca.predict(projection)
projection['cluster_pca'] = kmeans_pca.predict(projection)



projection['generos'] = dados_genero['genres']

projection

fig = px.scatter(projection, x='x', y='y', color='cluster_pca', hover_data= ['x', 'y', 'generos'])
fig.show()

pca_pipeline[1].explained_variance_ratio_.sum()

pca_pipeline[1].explained_variance_.sum()

dados.head()

dados['artists_song'].value_counts

from sklearn.preprocessing import OneHotEncoder

ohe = OneHotEncoder(dtype=int)

colunas_ohe = ohe.fit_transform(dados[['artists']]).toarray()
dados2 = dados.drop(['artists'], axis=1)

dados_musicas_dumie = pd.concat([dados2, pd.DataFrame(colunas_ohe, columns=ohe.get_feature_names_out(['artists']))], axis=1)

dados_musicas_dumie.head()



pca_pipeline = Pipeline([('scaler', StandardScaler()), ('PCA', PCA(n_components=0.7, random_state=SEED))])

music_embedding_pca = pca_pipeline.fit_transform(dados_musicas_dumie.drop(['id','name','artists_song'], axis=1))
projection_m = pd.DataFrame(data=music_embedding_pca)

pca_pipeline[1].n_components_

kmeans_pca_pipeline = KMeans(n_clusters=50, verbose=False, random_state=SEED)

kmeans_pca_pipeline.fit(projection_m)

dados['cluster_pca'] = kmeans_pca_pipeline.predict(projection_m)
projection_m['cluster_pca'] = kmeans_pca_pipeline.predict(projection_m)

projection_m['artists'] = dados['artists']
projection_m['song'] = dados['artists_song']

projection_m

fig = px.scatter(projection_m, x=0, y=1, color='cluster_pca', hover_data= [0, 1, 'song'])
fig.show()

pca_pipeline[1].explained_variance_ratio_.sum()

pca_pipeline[1].explained_variance_.sum()

fig = px.scatter_3d(projection_m, x=0, y=1, z=2, color='cluster_pca', hover_data= ['song'])
fig.update_traces(marker_size = 2)
fig.show()



from sklearn.metrics.pairwise import euclidean_distances

nome_musica = 'Ed Sheeran - Shape of You'

cluster = list(projection_m[projection_m['song'] == nome_musica]['cluster_pca'])[0]
musicas_recomendadas = projection_m[projection_m['cluster_pca']==cluster][[0,1,'song']]
x_musica = list(projection_m[projection_m['song'] == nome_musica][0])[0]
y_musica = list(projection_m[projection_m['song'] == nome_musica][1])[0]

distancias = euclidean_distances(musicas_recomendadas[[0, 1]], [[x_musica, y_musica]])
musicas_recomendadas['id'] = dados['id']
musicas_recomendadas['distancias'] = distancias
recomendada = musicas_recomendadas.sort_values('distancias').head(10)
recomendada

!pip install spotipy

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from spotipy.oauth2 import SpotifyOAuth

scope = 'user-library-read playlist-modify-private'
OAuth = SpotifyOAuth(scope=scope, redirect_uri='http://localhost:8888/callback', client_id='#Your API Key Here#', client_secret='#Your Key Here#')

client_credentials_manager = SpotifyClientCredentials(client_id='#Your API Key Here#', client_secret='#Your Key Here#')
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

import matplotlib.pyplot as plt
from skimage import io

nome_musica = 'Ed Sheeran - Shape of You'
id = dados[dados['artists_song'] == nome_musica]['id'].iloc[0]

track = sp.track(id)
url = track['album']['images'][1]['url']
name = track['name']

image = io.imread(url)
plt.imshow(image)
plt.xlabel(name, fontsize=10)
plt.show()

def recommend_id(playlist_id):
    url = []
    name = []

    for i in playlist_id:
        track = sp.track(i)
        url.append(track['album']['images'][1]['url'])
        name.append(track['name'])

    return name, url

name, url = recommend_id(recomendada['id'])

name, url

def visualize_songs(name, url):

  plt.figure(figsize=(15,10))
  columns=5

  for i, u in enumerate(url):
    ax = plt.subplot(len(url)//columns + 1, columns, i + 1)
    image = io.imread(u)
    plt.imshow(image)
    ax.get_yaxis().set_visible(False)
    plt.xticks(color='w',fontsize = 0.1)
    plt.yticks(color='w',fontsize = 0.1)
    plt.xlabel(name[i], fontsize=8)
    plt.tight_layout(h_pad=0.7, w_pad=0)
    plt.subplots_adjust(wspace=None, hspace=None)
    plt.tick_params(bottom=False)
    plt.grid(visible=False)
  plt.show()

visualize_songs(name, url)

def recomendador(nome_musica):


   cluster = list(projection_m[projection_m['song'] == nome_musica]['cluster_pca'])[0]
   musicas_recomendadas = projection_m[projection_m['cluster_pca']==cluster][[0,1,'song']]
   x_musica = list(projection_m[projection_m['song'] == nome_musica][0])[0]
   y_musica = list(projection_m[projection_m['song'] == nome_musica][1])[0]
   distancias = euclidean_distances(musicas_recomendadas[[0, 1]], [[x_musica, y_musica]])
   musicas_recomendadas['id'] = dados['id']
   musicas_recomendadas['distancias'] = distancias
   recomendada = musicas_recomendadas.sort_values('distancias').head(10)


   playlist_id = recomendada['id']
   url =[]
   name =[]
   for i in playlist_id:
        track = sp.track(i)
        url.append(track['album']['images'][1]['url'])
        name.append(track['name'])


   plt.figure(figsize=(15,10))
   columns=5

   for i, u in enumerate(url):
        ax = plt.subplot(len(url)//columns + 1, columns, i + 1)
        image = io.imread(u)
        plt.imshow(image)
        ax.get_yaxis().set_visible(False)
        plt.xticks(color='w',fontsize = 0.1)
        plt.yticks(color='w',fontsize = 0.1)
        plt.xlabel(name[i], fontsize=8)
        plt.tight_layout(h_pad=0.7, w_pad=0)
        plt.subplots_adjust(wspace=None, hspace=None)
        plt.tick_params(bottom=False)
        plt.grid(visible=False)
plt.show()

recomendador('Thunder - Intro')
