# **IMPORTING DATA FROM WEB, READING ITS CONTENT AND SPLITTING INTO DIFFERENT DFs**

import pandas as pd

file_path = "https://raw.githubusercontent.com/RafaelBaltazar/RafaelBaltazar.github.io/main/projects/Portfolio Analysis/account_statement.xlsx"

df = pd.read_excel(file_path, sheet_name=None)

for sheet_name, sheet_data in df.items():
    print(f"Sheet Name: {sheet_name}")
    print(sheet_data.head())  # Display the first few rows of each sheet

account_summary =df['Account Summary']
closed_positions=df['Closed Positions']
account_activity=df['Account Activity']
dividends=df['Dividends']
financial_summary=df['Financial Summary']
portfolio_equity=df['Portfolio Equity']


# **EXPLORATORY ANALYSIS AND CHART PLOTING**

## *Account Summary Sheet*

account_summary.dtypes

account_summary.isnull().sum()

account_summary.info

account_summary = account_summary.fillna(0)

## *Dividends Sheet*

dividends.dtypes

dividends['Date of Payment'] = pd.to_datetime(dividends['Date of Payment'])

dividends.isnull().sum()

dividends.info

import plotly.express as px

chart_dividends = pd.DataFrame({'Date': dividends['Date of Payment'], 'Net Dividend Received (USD)': dividends['Net Dividend Received (USD)']})

fig = px.bar(chart_dividends, x='Date', y='Net Dividend Received (USD)', title='Net Dividend Received Over Time',
             labels={'Net Dividend Received (USD)': 'Net Dividend Received (USD)'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))
fig.show()


from datetime import datetime

dividends = dividends.sort_values(by='Date of Payment')

dividends['Accumulated Dividends'] = dividends['Net Dividend Received (USD)'].cumsum()

today = datetime.now().strftime('%d-%m-%Y')
dividends = dividends[dividends['Date of Payment'] <= today]

fig = px.line(dividends, x='Date of Payment', y='Accumulated Dividends',
              title='Accumulated Dividends Over Time',
              labels={'Accumulated Dividends': 'Accumulated Dividends (USD)'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))
fig.show()


grouped_dividends = dividends.groupby('Instrument Name')['Net Dividend Received (USD)'].sum().reset_index()

top_10_payers = grouped_dividends.nlargest(10, 'Net Dividend Received (USD)')

fig = px.treemap(top_10_payers, path=['Instrument Name'], values='Net Dividend Received (USD)',
                 title='Top 10 Dividend Payers')

fig.show()


## *Financial Summary Sheet*

financial_summary.dtypes

financial_summary.isnull().sum()

financial_summary.info

chart_summary = pd.DataFrame({'Type': financial_summary['Name'], 'Amount (USD)': financial_summary['Amount\n in (USD)']})

fig = px.bar(chart_summary, x='Type', y='Amount (USD)', title='Amount received by Type',
             labels={'Amount Received (USD)': 'Amount Received (USD)'})

fig.show()


## *Account Activity Sheet*

account_activity.dtypes

account_activity['Date'] = pd.to_datetime(account_activity['Date'])

account_activity.isnull().sum()

account_activity.info

account_activity[account_activity.isnull().any(axis=1)]

account_activity.fillna(0)

import altair as alt

chart_deposits = account_activity[account_activity['Type'] == 'Deposit']

alt.Chart(chart_deposits).mark_bar().encode(
    x='Date:T',
    y='Amount:Q',
    tooltip=['Date:T', 'Amount:Q'],
).properties(
    title='Deposits Over Time',
    width=700,
    height=400
).interactive()



deposits_df = account_activity[account_activity['Type'] == 'Deposit']

deposits_df = deposits_df.sort_values(by='Date')

deposits_df['Cumulative Amount'] = deposits_df['Amount'].cumsum()

fig = px.line(deposits_df, x='Date', y='Cumulative Amount', title='Cumulative Deposits Over Time',
             labels={'Cumulative Amount': 'Cumulative Deposit Amount (USD)'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()


chart_deposits.head(-1)

chart_deposits.dtypes

alt.Chart(chart_deposits).mark_bar().encode(
    x='Date:T',
    y='Balance:Q',
    tooltip=['Date:T', 'Balance:Q'],
).properties(
    title='Balance Over Time',
    width=700,
    height=400
).interactive()


fig = px.violin(account_activity[account_activity['Type'] != 'Deposit'], x='Realized Equity Change',
                   title='Count of Realized Equity Change Values',
                   labels={'Realized Equity Change': 'Realized Equity Change (USD)'})

fig.show()


chart_most_traded = account_activity[account_activity['Type'] != 'Deposit']

fig = px.bar(chart_most_traded, x='Details',
                title='Most Traded',
                labels={'Details': 'Asset'})

fig.show()


## *Portfolio Equity Sheet*

portfolio_equity.dtypes

portfolio_equity.isnull().sum()

portfolio_equity.info

portfolio_equity = portfolio_equity.drop(0)
portfolio_equity.head()

chart_equity = pd.DataFrame({'Date': portfolio_equity['Date'], 'Portfolio Value (USD)': portfolio_equity['Portfolio Value (USD)']})

fig = px.line(chart_equity, x='Date', y='Portfolio Value (USD)', title='Portfolio Equity Over Time',
             labels={'Portfolio Equity (USD)': 'Portfolio Equity (USD)'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()


portfolio_equity['Change'] = portfolio_equity['Portfolio Value (USD)'].pct_change()
portfolio_equity['Cumulative Returns'] = (1 + portfolio_equity['Change']).cumprod()
portfolio_equity['Drawdown'] = 1 - portfolio_equity['Cumulative Returns'] / portfolio_equity['Cumulative Returns'].cummax()

portfolio_equity.fillna(0)

chart_changes = pd.DataFrame({'Date': portfolio_equity['Date'], 'Change': portfolio_equity['Change']*100})

fig = px.bar(chart_changes, x='Date', y='Change', title='Portfolio Change (%) Over Time',
             labels={'Change': 'Change'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()

chart_changes = pd.DataFrame({'Date': portfolio_equity['Date'], 'Cumulative Returns': portfolio_equity['Cumulative Returns']})

fig = px.bar(chart_changes, x='Date', y='Cumulative Returns', title='Portfolio Cumulative Returns (%) Over Time',
             labels={'Cumulative Returns': 'Cumulative Returns'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()

chart_changes = pd.DataFrame({'Date': portfolio_equity['Date'], 'Drawdown': portfolio_equity['Drawdown']*100})

fig = px.bar(chart_changes, x='Date', y='Drawdown', title='Portfolio Drawdown (%) Over Time',
             labels={'Drawdown': 'Drawdown'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()


print(f"Max Drawdown: {portfolio_equity['Drawdown'].max()*100:.2f}%")


### *Comparing Portfolio with SP500 as Benchmark*

**Using SPY as a SP500 tracker**

import yfinance as yf

ticker_symbol = 'SPY'

start_date = '2020-01-02'
end_date = '2024-01-01'

spy_data = yf.download(ticker_symbol, start=start_date, end=end_date)

spy_data = spy_data.reset_index()


spy_data.dtypes

spy_data.isnull().sum()

spy_data.info

chart_spy = pd.DataFrame({'Date': spy_data['Date'], 'Close': spy_data['Close']})

fig = px.line(chart_spy, x='Date', y='Close', title='SPY price',
             labels={'Close': 'Close'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()

chart_spy_monthly = spy_data.set_index('Date').resample('M').last().reset_index()
chart_spy_monthly.head()

import plotly.graph_objects as go

fig = go.Figure()

fig.add_trace(go.Scatter(x=chart_equity['Date'], y=chart_equity['Portfolio Value (USD)'], name='Portfolio Equity'))

fig.add_trace(go.Scatter(x=chart_spy_monthly['Date'], y=chart_spy_monthly['Close'], name='SPY Price', yaxis='y2'))

fig.update_layout(
    title='Portfolio Equity and SPY Price Comparison',
    xaxis=dict(title='Date'),
    yaxis=dict(title='Portfolio Equity (USD)', rangemode='tozero'),
    yaxis2=dict(title='SPY Price', overlaying='y', side='right', rangemode='tozero'),
    legend=dict(x=0, y=1, traceorder='normal', orientation='h')
)
fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()

net_equity = portfolio_equity[['Date', 'Portfolio Value (USD)']].copy()
net_equity = pd.merge(net_equity, chart_deposits[['Date', 'Amount']], how='outer')

net_equity['Amount'] = net_equity['Amount'].fillna(0)
net_equity['Portfolio Value (USD)'] = net_equity['Portfolio Value (USD)'].fillna(0)


net_equity.info

grouped_net_equity = net_equity.groupby('Date').sum().reset_index()


grouped_net_equity.info

grouped_net_equity['Date'] = pd.to_datetime(grouped_net_equity['Date'])
grouped_net_equity['Month'] = grouped_net_equity['Date'].dt.to_period('M')

agg_funcs = {
    'Portfolio Value (USD)': 'sum',  
    'Amount': 'sum', 
 }

grouped_net_equity = grouped_net_equity.groupby('Month').agg(agg_funcs).reset_index()
grouped_net_equity['Month'] = grouped_net_equity['Month'].astype('datetime64[ns]')

print(grouped_net_equity)
grouped_net_equity.dtypes

grouped_net_equity['Accumulated Amount'] = grouped_net_equity['Amount'].cumsum()
grouped_net_equity.info

grouped_net_equity['Net Portfolio Value'] = grouped_net_equity['Portfolio Value (USD)'] - grouped_net_equity['Accumulated Amount']
grouped_net_equity.info


chart_net_equity = pd.DataFrame({'Month': grouped_net_equity['Month'], 'Net Portfolio Value': grouped_net_equity['Net Portfolio Value']})

fig = px.line(grouped_net_equity, x='Month', y='Net Portfolio Value', title='Net Portfolio Equity Over Time',
             labels={'Net Portfolio Value': 'Net Portfolio Value'})

fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()

fig = go.Figure()

fig.add_trace(go.Scatter(x=chart_net_equity['Month'], y=chart_net_equity['Net Portfolio Value'], name='Net Portfolio Value'))

fig.add_trace(go.Scatter(x=chart_spy_monthly['Date'], y=chart_spy_monthly['Close'], name='SPY Price', yaxis='y2'))

fig.update_layout(
    title='Portfolio Net Equity and SPY Price Comparison',
    xaxis=dict(title='Date'),
    yaxis=dict(title='Portfolio Net Equity (USD)', rangemode='tozero'),
    yaxis2=dict(title='SPY Price', overlaying='y', side='right', rangemode='tozero'),
    legend=dict(x=0, y=1, traceorder='normal', orientation='h')
)
fig.update_xaxes(rangeselector=dict(
    buttons=list([
        dict(count=1, label='1m', step='month', stepmode='backward'),
        dict(count=6, label='6m', step='month', stepmode='backward'),
        dict(count=1, label='YTD', step='year', stepmode='todate'),
        dict(count=1, label='1y', step='year', stepmode='backward'),
        dict(step='all')
    ])
))

fig.show()

## *Closed Positions Sheet*

closed_positions.dtypes

closed_positions['Open Date'] = pd.to_datetime(closed_positions['Open Date'])
closed_positions['Close Date'] = pd.to_datetime(closed_positions['Close Date'])

closed_positions.isnull().sum()

closed_positions.head(-1)

closed_positions.fillna(0)

alt.Chart(closed_positions).mark_bar().encode(
    x='Close Date:T',
    y='Profit(USD):Q',
    tooltip=['Date:T', 'Profit(USD):Q'],
).properties(
    title='Profit/Loss Over Time',
    width=700,
    height=400
).interactive()

closed_positions['Close Date'] = pd.to_datetime(closed_positions['Close Date'])

chart_fees = closed_positions.sort_values(by='Close Date')

chart_fees = chart_fees.reset_index()

chart_fees['Cumulative Spread Fees (USD)'] = closed_positions['Spread Fees (USD)'].cumsum()

fig = px.line(chart_fees, x='Close Date', y='Cumulative Spread Fees (USD)', title='Cumulative Spread Fees Over Time',
             labels={'Spread Fees (USD)': 'Cumulative Spread Fees (USD)'})

fig.update_xaxes(rangeslider_visible=True)

fig.show()


print(f"Portfolio Total Profit/Loss: {closed_positions['Profit(USD)'].sum():.2f}")


grouped_profit = closed_positions.groupby('Action')['Profit(USD)'].sum().reset_index()

top_10_profit = grouped_profit.nlargest(10, 'Profit(USD)')

fig = px.treemap(top_10_profit, path=['Action'], values='Profit(USD)',
                 title='Top 10 Profits by Asset')

fig.show()


**Plotly treemap didn't worked for nsmallest funcion, so I had to use an alternative route**

!pip install squarify

import squarify
import matplotlib.pyplot as plt

grouped_losses = closed_positions.groupby('Action')['Profit(USD)'].sum().reset_index()
top_10_losses = grouped_losses.nsmallest(10, 'Profit(USD)')

values = top_10_losses['Profit(USD)'].values
norm_values = squarify.normalize_sizes(values, dx=100, dy=100)

labels = [f"{action}\n{profit:.2f}" for action, profit in zip(top_10_losses['Action'], top_10_losses['Profit(USD)'])]

plt.figure(figsize=(10, 10))
squarify.plot(sizes=norm_values, label=labels, alpha=0.7, color=plt.cm.Paired.colors, edgecolor='white')
plt.axis('off')
plt.title('Top 10 Losses by Asset')
plt.show()
